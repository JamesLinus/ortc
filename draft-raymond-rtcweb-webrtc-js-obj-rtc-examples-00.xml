<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<rfc ipr="trust200902" docName="draft-raymond-rtcweb-webrtc-js-obj-rtc-examples-00" category="info">

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

  <front>
    <title>WebRTC JavaScript Object RTC Examples</title>

    <author initials="R." surname="Raymond" fullname="Robin Raymond">
      <organization>Hookflash</organization>
      <address>
        <postal>
          <street>436, 3553 31 St. NW</street>
          <city>Calgary</city>
          <region>Alberta</region>
          <code>T2L 2K7</code>
          
        </postal>
        
        
        <email>robin@hookflash.com</email>
        
      </address>
    </author>
    <author initials="C." surname="Dorn" fullname="Christoph Dorn">
      <organization>Independent</organization>
      <address>
        <postal>
          <street>1999 Highway 97 South</street>
          <city>West Kelowna</city>
          <region>BC</region>
          <code>V1Z 1B2</code>
          <country>Canada</country>
        </postal>
        
        
        <email>christoph@christophdorn.com</email>
        
      </address>
    </author>
    <author initials="E." surname="Lagerway" fullname="Erik Lagerway">
      <organization>Hookflash</organization>
      <address>
        <postal>
          <street>436, 3553 31 St. NW</street>
          <city>Calgary</city>
          <region>Alberta</region>
          <code>T2L 2K7</code>
          <country>Canada</country>
        </postal>
        
        
        <email>erik@hookflash.com</email>
        
      </address>
    </author>
    <author initials="I." surname="Baz Castillo" fullname="Inaki Baz Castillo">
      <organization>Versatica</organization>
      <address>
        <postal>
          <street>Barakaldo</street>
          <city>Basque Country</city>
          
          
          <country>Spain</country>
        </postal>
        
        
        <email>ibc@aliax.net</email>
        
      </address>
    </author>
    <author initials="R." surname="Shpount" fullname="Roman Shpount">
      <organization>TurboBridge</organization>
      <address>
        <postal>
          <street>4905 Del Ray Ave Suite 300</street>
          <city>Bethesda</city>
          <region>MD</region>
          <code>20814</code>
          <country>USA</country>
        </postal>
        
        
        <email>rshpount@turbobridge.com</email>
        
      </address>
    </author>

    <date year="2013" month="July" day="05"/>

    <area>General</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This draft outlines example use cases with example code for using the WebRTC JavaScript Object RTC.</t>



    </abstract>


  </front>

  <middle>


<section anchor="problems" title="Introduction">

<t>This draft is supplementary to the WebRTC JavaScript Object RTC draft <xref target="WebRTCJSObj"/> and outlines code examples when using the proposed object model. The code is written in a sequential fashion where both “Alice” and “Bob” roles are merged into a single code stream even though they would actually be split across the network. This is helpful for code illustration purposes, otherwise a sequence diagram and event firings to incorporate custom signaling would confuse the example but add virtually no value in understanding the sequences needing to be called to setup RTC communications.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

</section>
<section anchor="example-use-cases" title="Example Use Cases">

<section anchor="simple" title="Simple">

<t><list style='numbers'>
  <t>Browser A creates a connection</t>
  <t>Browser A indicates the desire to connect to Browser B</t>
  <t>Browser B creates a connection</t>
  <t>Browser B sends response to Browser A</t>
  <t>Browser A and B exchange candidates</t>
  <t>Browser A and B are connected</t>
  <t>Browser A and Browser B send media</t>
</list></t>

<section anchor="simpleexample" title="Example Code">

<t>This code illustrates both “Alice” and “Bob” forming a simple media stream connection (within the same code flow for documentation sake) where the external signaling is left up to the implementation. This is very similar to the “basic” use case in the current WebRTC 1.0 <xref target="WebRTC10"/>. Media streams capture and rendering details are not shown as they they fall with in the scope of the browser media stream API <xref target="MediaCapture"/>.</t>

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// STEP 1: Browser A creates a connection
var alice_connection = new ORTC.Connection();

//-------------------------------------------------------------------
// STEP 2: Browser A indicates the desire to connect to Browser B
var msg_connection_info_for_bob = JSON.stringify(
  alice_connection.getDescription());
var msg_constraints_for_bob = JSON.stringify(
  alice_connection.getConstraints("receive"));

alice_connection.receiveStream(aliceMediaStreamFromBob);

mysignal(msg_connection_info_for_bob, msg_constraints_for_bob);

//-------------------------------------------------------------------
// STEP 3: Browser B creates a connection
var bob_connection = new ORTC.Connection();    
bob_connection.setDescription( JSON.parse(
  msg_connection_info_for_bob),"remote");
bob_connection.setConstraints( JSON.parse(
  msg_constraints_for_bob), "send");

bob_connection.receiveStream(bobMediaStreamFromAlice);
bob_connection.sendStream(bobMediaStreamForAlice);

//-------------------------------------------------------------------
// STEP 4: Browser B sends response to Browser A
var msg_connection_info_for_alice = JSON.stringify(
  bob_connection.getDescription());
var msg_constraints_for_alice = JSON.stringify(
  bob_connection.getConstraints("receive"));

mysignal(msg_connection_info_for_alice, msg_constraints_for_alice);

alice_connection.setDescription( JSON.parse(
  msg_connection_info_for_alice), "remote");
alice_connection.setConstraints( JSON.parse(
  msg_constraints_for_alice), "send");

alice_connection.sendStream(aliceMediaStreamForBob);

//-------------------------------------------------------------------
// STEP 5: Browser A and B exchange candidates    
// - tightly couple trickle ICE (usually sent over signaling channel)
alice_connection.onconnectioncandidate = function(candidate) {
    bob_connection.addConnectionCandidate(
      JSON.parse(JSON.stringify(candidate)));
});
bob_connection.onconnectioncandidate = function(candidate) {
    alice_connection.addConnectionCandidate(
      JSON.parse(JSON.stringify(candidate)));
});

//-------------------------------------------------------------------
// STEP 6: Browser A and B are connected
alice_connection.onconnected = function() {
  // ... horray ...
}

bob_connection.onconnected = function() {
  // ... horray ...
}

//-------------------------------------------------------------------
// STEP 7: Browser A and Browser B send media

alice_connection.onstreamconnected = function(stream) {
  // ... horray ... stream can play now...
}
bob_connection.onstreamconnected = function(stream) {
  // ... horray ... stream can play now...
}
]]></artwork></figure>

</section>
<section anchor="same-under-jsep" title="Same Under JSEP">

<t>This simple example <xref target="simpleexample"/> illistrates one simple concept, the local party dictates the codecs it wishes to receive. The same situation expressed in WebRTC 1.0 <xref target="WebRTC10"/> code is too unmanageable to publish so pseudo code will suffice to illustrate the comparison:</t>

<t><list style='numbers'>
  <t>Alice creates an offer</t>
  <t>Alice hold back setting the offer in the browser</t>
  <t>Alice parses the offer SDP to extract out the codec / algorithm list, and converts to “mysignal” format</t>
  <t>Alice signals “mysignal” format on the wire to Bob</t>
  <t>Bob converts “mysignal” into a regenerated SDP offer format</t>
  <t>Bob creates an answer (using the regenerated SDP offer)</t>
  <t>Bob parses the SDP answer, extracts out the codec list, and prepare for “mysignal” format</t>
  <t>Bob regenerates the SDP answer, changes the m-line to match the codec, changes all the “a=” to match the codecs from Alice, changes all the special “format” SDP attributes that match the payload id of the codecs</t>
  <t>Bob set the new regenerated “replacement” answer back to the browser as a replacement answer</t>
  <t>Bob signals “mysignal” format on the wire back to Alice</t>
  <t>Alice generates a replacement offer based on Bob’s codecs from “mysignal” format</t>
  <t>Alice sets the replacement offer to the browser</t>
  <t>Alice generates a new SDP answer based on Alice’s original codecs</t>
  <t>Alice gives the answer to the browser</t>
</list></t>

<t>Why is this so much more complicated under JSEP?</t>

<t><list style='numbers'>
  <t>Requires SDP parsing, generating and format mangling to set “basic” things like codecs</t>
  <t>Requires the SDP format to be understood, including the SSRC bundling information, even though only the codecs are re-arranged</t>
  <t>The state machine requires a particular state order, in which operations must be followed</t>
  <t>The SDP is a negotiated codec list, not a unidirectional codec list</t>
</list></t>

<t>Even ignoring the need to parse the SDP format (assuming a library is used to do that work), the code is still very difficult to use and manage.</t>

<t>In “mysignal” signaling, the remote party must only send to the codecs / payloads dictated by the local peer. Except, this is not how SDP works. An SDP offer dictates the sending codecs the remote peer should expect to receive, not the codec list the local peer wishes to receive. In this scenario, only when the answer arrives can the actual codec list for the offer be determined to “trick” SDP into thinking that’s the way it wanted to “send” the codecs all along.</t>

<t>This could lead to the argument “follow the SDP way of doing constraints”. That’s part of the trouble, signaling protocols either have to bend over backwards to “follow the SDP way”, or, just do SDP. The JSEP protocol is highly biased to a signal method of doing negotiations, that is SIP with SDP. All alternative signaling protocols are forced to carry an SDP parser and generated to utilize WebRTC despite not needing SDP, or, they are forced to use SDP.</t>

<t>This is merely one of many cases that is quite complex under JSEP.</t>

</section>
</section>
<section anchor="morecomplex" title="More Complex">

<t><list style='numbers'>
  <t>Browser A creates a connection</t>
  <t>Browser A indicates the desire to connect to Browser B, includes stream description</t>
  <t>Browser B creates a connection, send browser A a stream description</t>
  <t>Browser B sends response to Browser A</t>
  <t>Browser A and B exchange candidates</t>
  <t>Browser A and B are connected</t>
  <t>Browser A and Browser B send media as defined in the stream descriptions</t>
</list></t>

<section anchor="example-code" title="Example Code">

<t>This case differs slightly from the simple example (<xref target="simple"/>) where Alice and Bob include details of their stream information on the wire rather than relying loose rules auto-assembly of the stream information. This ensures the streams sent over RTP are assembled exactly as specified by the sender for signaling situations (where this matters).</t>

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// STEP 1: Browser A creates a connection
var alice_connection = new ORTC.Connection();

//-------------------------------------------------------------------
// STEP 2: Browser A indicates the desire to connect to Browser B
var msg_connection_info_for_bob = JSON.stringify(
  alice_connection.getDescription());
var msg_constraints_for_bob = JSON.stringify(
  alice_connection.getConstraints("receive"));
var msg_stream_info_for_bob = JSON.stringify(
  alice_connection.getDescription(aliceStreamForBob));

alice_connection.sendStream(aliceMediaStreamForBob);

mysignal(
  msg_connection_info_for_bob,
  msg_constraints_for_bob,
  msg_stream_info_for_bob
  );

//-------------------------------------------------------------------
// STEP 3: Browser B creates a connection
var bob_connection = new ORTC.Connection();    
bob_connection.setDescription( JSON.parse(
  msg_connection_info_for_bob),"remote");
bob_connection.setConstraints( JSON.parse(
  msg_constraints_for_bob), "send");

bob_connection.receiveStream(
  bobMediaStreamFromAlice,
  JSON.parse(msg_stream_info_for_bob));
bob_connection.sendStream(bobMediaStreamForAlice);

//-------------------------------------------------------------------
// STEP 4: Browser B sends response to Browser A
var msg_connection_info_for_alice = JSON.stringify(
  bob_connection.getDescription());
var msg_constraints_for_alice = JSON.stringify(
  bob_connection.getConstraints("receive"));
var msg_stream_info_for_alice = JSON.stringify(
  alice_connection.getDescription(bobStreamForAlice));

mysignal(
  msg_connection_info_for_alice,
  msg_constraints_for_alice,
  msg_stream_info_for_alice
  );

alice_connection.setDescription( JSON.parse(
  msg_connection_info_for_alice), "remote");
alice_connection.setConstraints( JSON.parse(
  msg_constraints_for_alice), "send");

alice_connection.receiveStream(
  aliceMediaStreamFromBob,
  JSON.parse(msg_stream_info_for_alice));

//-------------------------------------------------------------------
// STEP 5: Browser A and B exchange candidates    
// - tightly couple trickle ICE (usually sent over signaling channel)
alice_connection.onconnectioncandidate = function(candidate) {
    bob_connection.addConnectionCandidate(
      JSON.parse(JSON.stringify(candidate)));
});
bob_connection.onconnectioncandidate = function(candidate) {
    alice_connection.addConnectionCandidate(
      JSON.parse(JSON.stringify(candidate)));
});

//-------------------------------------------------------------------
// STEP 6: Browser A and B are connected
alice_connection.onconnected = function() {
  // ... horray ...
}

bob_connection.onconnected = function() {
  // ... horray ...
}

//-------------------------------------------------------------------
// STEP 7: Browser A and Browser B send media

alice_connection.onstreamconnected = function(stream) {
  // ... horray ... stream can play now...
}
bob_connection.onstreamconnected = function(stream) {
  // ... horray ... stream can play now...
}
]]></artwork></figure>

</section>
</section>
<section anchor="adding-removing-streams" title="Adding / Removing Streams">

<section anchor="simple-example" title="Simple Example">

<t><list style='numbers'>
  <t>Browser A creates a connection</t>
  <t>Browser A indicates the desire to connect to Browser B</t>
  <t>Browser B creates a connection</t>
  <t>Browser B sends response to Browser A</t>
  <t>Browser A and B exchange candidates</t>
  <t>Browser A and B are connected</t>
  <t>Browser A and Browser B send media</t>
  <t>Browser A sends additional media stream</t>
  <t>Browser A removes first media stream</t>
</list></t>

<section anchor="example-code-1" title="Example Code">

<t>Steps 1-7 follow the example steps from the simple example (<xref target="simpleexample"/>).</t>

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// STEP 1 .. STEP 7: follows simple example steps

// ... see simple example ...

//-------------------------------------------------------------------
// STEP 8: Browser A sends additional media stream

alice_connection.sendStream(aliceFishTankStreamForBob);

mysignal("to:bob", "+stream: fish tank cam");

bob_connection.receiveStream(addedStreamFromAlice);

//-------------------------------------------------------------------
// STEP 9: Browser A removes first media stream

alice_connection.sendStream(aliceMediaStreamForBob, false);

mysignal("to:bob", "-stream: me");

bob_connection.onstreamdisconnected = function(stream) {
  // ... can't see alice now ...
}
]]></artwork></figure>

</section>
</section>
<section anchor="complex-example" title="Complex Example">

<t><list style='numbers'>
  <t>Browser A creates a connection</t>
  <t>Browser A indicates the desire to connect to Browser B, includes stream description</t>
  <t>Browser B creates a connection, send browser A a stream description</t>
  <t>Browser B sends response to Browser A</t>
  <t>Browser A and B exchange candidates</t>
  <t>Browser A and B are connected</t>
  <t>Browser A and Browser B send media as defined in the stream descriptions</t>
  <t>Browser A creates a description for a new stream, sends to Browser B</t>
  <t>Browser B listens for new stream based on description</t>
  <t>Browser B notifies Browser A ready</t>
  <t>Browser A send new stream to Browser B</t>
</list></t>

<section anchor="example-code-2" title="Example Code">

<t>Steps 1-7 follow the example steps from the more complex example (<xref target="morecomplex"/>).</t>

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// STEP 1 .. STEP 7: follows more complex example steps

// ... see more complex example ...

//-------------------------------------------------------------------
// STEP 8: Browser A creates a description for a new stream,
//         sends to Browser B

fishDes = alice_connection.getDescription(aliceFishTankStreamForBob);

mysignal("to:bob","stream:info", JSON.stringify(fishDes));

//-------------------------------------------------------------------
// STEP 9: Browser B listens for new stream based on description

bob_connection.receiveStream(
  addedStreamFromAlice,
  JSON.parse(fishDes));

//-------------------------------------------------------------------
// STEP 10: Browser B notifies Browser A ready

mysignal("to:alice","stream:listening");

//-------------------------------------------------------------------
// STEP 11: Browser B notifies Browser A ready

alice_connection.sendStream(aliceFishTankStreamForBob);
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="audio-with-dtmf-video-and-data-sockets" title="Audio with DTMF, Video and Data Sockets">

<section anchor="use-case" title="Use case">

<t>In this scenario, browser A wishes to use three separate sockets on three different ports. One for audio, one for video and one for data. The socket should not be muxed in this case for the various kind of media and streams. The code only differs from the simple example (<xref target="simpleexample"/>) by the following:</t>

<t><list style='numbers'>
  <t>Alice and Bob create sockets with specific roles</t>
  <t>Alice sends a data stream</t>
  <t>Alice creates a DTMF media stream track and adds to audio / video stream</t>
  <t>Bob listens for the DTMF media stream track to connect</t>
  <t>Bob distinguishes the type of stream connected, i.e. media vs data (for unspecified purpose)</t>
</list></t>

<t>The code reflects only those changes needed to accomplish the task. In other words, the modularity allows object model code not to have to do bend to a state machine and the coder is free to treat the additions as independent tasks rather than having to be concerned with the impact it will have on the other components.</t>

</section>
<section anchor="example-code-3" title="Example Code">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// STEP 1: Browser A creates sockets and a connection

var alice_aTrans = new ORTC.MediaSocket(
  "audio",
  {kinds:["audio", "dtmf"]});
var alice_vTrans = new ORTC.MediaSocket(
  "video",
  {kinds:["video"]});
var alice_dTrans = new ORTC.DataSocket();
var alice_connection = new ORTC.Connection(
  {sockets:[alice_aTrans, alice_vTrans, alice_dTrans]});

//-------------------------------------------------------------------
// STEP 2: Browser A indicates the desire to connect to Browser B
var msg_connection_info_for_bob = JSON.stringify(
  alice_connection.getDescription());
var msg_constraints_for_bob = JSON.stringify(
  alice_connection.getConstraints("receive"));

alice_connection.receiveStream(aliceMediaStreamFromBob);
alice_connection.sendStream(aliceDataStream);

mysignal(msg_connection_info_for_bob, msg_constraints_for_bob);

//-------------------------------------------------------------------
// STEP 3: Browser B creates a connection
var bob_aTrans = new ORTC.MediaSocket(
  "audio",
  {kinds:["audio", "dtmf"]});
var bob_vTrans = new ORTC.MediaSocket(
  "video",
  {kinds:["video"]});
var bob_dTrans = new ORTC.DataSocket();
var bob_connection = new ORTC.Connection(
  {sockets:[bob_aTrans, bob_vTrans, bob_dTrans]});

bob_connection.setDescription( JSON.parse(
  msg_connection_info_for_bob),"remote");
bob_connection.setConstraints( JSON.parse(
  msg_constraints_for_bob), "send");

bob_connection.receiveStream(bobMediaStreamFromAlice);
bob_connection.sendStream(bobMediaStreamForAlice);

//-------------------------------------------------------------------
// STEP 4: Browser B sends response to Browser A
var msg_connection_info_for_alice = JSON.stringify(
  bob_connection.getDescription());
var msg_constraints_for_alice = JSON.stringify(
  bob_connection.getConstraints("receive"));

mysignal(msg_connection_info_for_alice, msg_constraints_for_alice);

alice_connection.setDescription( JSON.parse(
  msg_connection_info_for_alice), "remote");
alice_connection.setConstraints( JSON.parse(
  msg_constraints_for_alice), "send");

var aliceDtmfTrackToBob = 
    new ORTC.DtmfMediaStreamTrack(alice_aTrans);
var aliceMediaStreamForBob =
    new ORTC.MediaStream([aliceDtmfTrackToBob]);

alice_connection.sendStream(aliceMediaStreamForBob);

//-------------------------------------------------------------------
// STEP 5: Browser A and B exchange candidates    
// - tightly couple trickle ICE (usually sent over signaling channel)
alice_connection.onconnectionandidate = function(candidate) {
    bob_connection.addConnectionCandidate(
      JSON.parse(JSON.stringify(candidate)));
});
bob_connection.onconnectioncandidate = function(candidate) {
    alice_connection.addConnectionCandidate(
      JSON.parse(JSON.stringify(candidate)));
});

//-------------------------------------------------------------------
// STEP 6: Browser A and B are connected
alice_connection.onconnected = function() {
  // ... horray ...
}

bob_connection.onconnected = function() {
  // ... horray ...
}

//-------------------------------------------------------------------
// STEP 7: Browser A and Browser B send media

alice_connection.onstreamconnected = function(stream) {
  // ... horray ... stream can play now...
  aliceDtmfTrackToBob.playTones("4,1,5,111222344#");
}

bob_connection.onstreamconnected = function(stream) {
  if (stream instanceof ORTC.DataStream) {
     // horray have data stream
  } else {
     // ... horray ... stream can play now...
   }
}

bob_connection.ontrackconnected = function(track) {
  if (track instanceof ORTC.DtmfMediaStreamTrack) {
    track.ontonestop = function(digit) {
      // ... react just like an IVR system! ...
    }
  }
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="webrtc-10-comparison-example-usage-cases" title="WebRTC 1.0 Comparison Example Usage Cases">

<section anchor="stream-added" title="Stream Added">

<t>Scenario:</t>

<t><list style='numbers'>
  <t>Alice adds a new stream on an established session with Bob.</t>
</list></t>

<section anchor="webrtc-10" title="WebRTC 1.0">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// Alice adds a new stream to the RTCPeerconnection and sends
// the SDP Offer to Bob
alice_RTCPeerConnection.addStream(stream);
alice_RTCPeerConnection.createOffer(
  localDescriptionCreated, rtcError);

var localDescriptionCreated = function(description) {
  alice_RTCPeerConnection.setLocalDescription(
    description, sendDescription, rtcError);
}

var sendDescription = function() {
  mySignal({sdp: alice_RTCPeerConnection.localDescription});
}

// Bob receives the SDP Offer from Alice, consumes it and
// sends her the SDP Answer
bob_RTCPeerConnection.setRemoteDescription(
  new RTCSessionDescription({type: 'offer', sdp: sdpOfferFromAlice}), 
  sendDescription, 
  rtcError
);

var sendDescription = function() {
  mySignal({sdp: bob_RTCPeerConnection.localDescription});
}

// Alice receives the Answer from Bob and processes it
alice_RTCPeerConnection.setRemoteDescription(
  new RTCSessionDescription({type: 'answer', sdp: sdpAnswerFromBob}), 
  function(){}, 
  rtcError);
]]></artwork></figure>

</section>
<section anchor="same-under-webrtc-js-object-model" title="Same Under WebRTC JS Object Model">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// Alice sends the description of a new stream to Bob and prepares
// the stream to be send after ICE discovery.
var aliceStreamForBobDesc = alice_connection.getDescription(stream);
alice_connection.sendStream(stream);

mySignal({stream: aliceStreamForBobDesc});

// Bob receives the new stream description and processes it
bob_connection.receiveStream(aliceStreamForBobDesc);
]]></artwork></figure>

</section>
</section>
<section anchor="stream-removed" title="Stream Removed">

<t>Scenario:</t>

<t><list style='numbers'>
  <t>Alice removes a stream on an established session with Bob.</t>
</list></t>

<section anchor="webrtc-10-1" title="WebRTC 1.0">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// Alice removes a stream from the RTCPeerconnection and sends
// the SDP Offer to Bob
alice_RTCPeerConnection.removeStream(stream);
alice_RTCPeerConnection.createOffer(
  localDescriptionCreated, rtcError);

var localDescriptionCreated = function(description) {
  alice_RTCPeerConnection.setLocalDescription(
    description, sendDescription, rtcError);
}

var sendDescription = function(){
  mySignal({sdp: alice_RTCPeerConnection.localDescription});
}

// Bob receives the SDP Offer from Alice and processes it
bob_RTCPeerConnection.setRemoteDescription(
  new RTCSessionDescription({type: 'offer', sdp: sdpOfferFromAlice}), 
  sendDescription, 
  rtcError
);

// setRemoteDescription() execution will inform Bob
// about the stream removal
bob_RTCPeerConnection.onremovestream = function(stream) {
  // stream removed
}

//  Bob sends the SDP Answer to Alice
var sendDescription = function(){
  mySignal(sdp: bob_RTCPeerConnection.localDescription);
}

// Alice receives the Answer from Bob and processes it
alice_RTCPeerConnection.setRemoteDescription(
  new RTCSessionDescription({type: 'answer', sdp: sdpAnswerFromBob}), 
  function(){}, 
  rtcError);
]]></artwork></figure>

</section>
<section anchor="same-under-webrtc-js-object-model-1" title="Same Under WebRTC JS Object Model">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// Alice removes the stream from the RTC connection
alice_connection.sendStream(stream, false);

// Bob is informed about the stream disconnection
bob_connection.onstreamdisconnected = function(stream) {
  // stream removed
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="example-descriptions-and-constraints" title="Example Descriptions and Constraints">

<t>This section outlines some examples of what object descriptions or constraints might look like expressed as natural JavaScript structures. The exact properties needs to be defined as each option becomes standardized. As such, use these examples for illustrative purposes only.</t>

<section anchor="connection-description" title="Connection Description">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
var myConnectionDescription = {
    cname: "<value>",
    contextId: "<random-id>",
    secret: "<random>",
    fingerprints: ["<hash1>","<hash2>"]
};
]]></artwork></figure>

</section>
<section anchor="stream-description" title="Stream Description">

<section anchor="full-description" title="Full Description">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
var myStreamDescription = [
    { // audio
        track: "<track-id>",
        ssrc: 5,
        redundencySsrc: 10,
        socketId: "my-audio-port",
        constraints: { /* optional constraints */ }
    },
    { // video
        kind: "video",
        ssrc: 10,
        socketId: "my-video-port",
        constraints: { /* optional constraints */ }
     },
     { // dtmf
        kind: "dtmf",
        ssrc: 5,
        socketId: "my-audio-port",
        constraints: { /* optional constraints */ }
     },
     { // unspecified
         track: "poor-taste-track-id",
         omit: true
     }
];
]]></artwork></figure>

</section>
<section anchor="loose-description" title="Loose Description">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
// In this example, can auto map audio / video based on kind alone
var myStreamDescriptionLooseExampleA = [
    {
        kind: "audio"
    },
    {
        kind: "video"
    }
];

//-------------------------------------------------------------------
// In this example a more specific definition is given, 
// but some things are still auto-mapped
var myStreamDescriptionLooseExampleB = [
    {
        kind: "audio",
        ssrc: 5,
        socketId: "my-audio-port"
    },
    {
        kind: "video",
        socketId: "my-video-port",
    },
    {
        kind: "dtmf"
    },
    {
        track: "<existing-track-id>",
        ssrc: 17,
        socketId: "my-other-port"
    }
];
]]></artwork></figure>

</section>
</section>
<section anchor="constraints" title="Constraints">

<figure><artwork><![CDATA[
//-------------------------------------------------------------------
var myConstraints = {
    codecs: [
        {
            payloadId: 96,
            kind: "audio",
            name: "<name>",
            hzRate: 32000,
            channels: 1
            // ...
        },
        {
            payloadId: 96,
            kind: "video",
            name: "<name>",
            hzRate: 96000
            // ...
        }
    ],
    crypto: [
        {
            algorithm: "<name>",
            priority: 0,
            // mki: "<octects>",
            key: "<random>"
        },
        {
            algorithm: "<name>",
            priority: 2,
            // mki: "<octets>",
            key: "<random>"
        }
    ],
    required: {
    },
    optional: {
        video: {
            maxWdith: 1280,
            maxHeight: 720
        }
    }
};
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As this is merely an informative example draft, the security considerations are identical to the related draft proposal found in the WebRTC JavaScript Object RTC draft <xref target="WebRTCJSObj"/>.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="WebRTCJSObj" target="http://tools.ietf.org/html/draft-raymond-rtcweb-webrtc-js-obj-rtc-00">
  <front>
    <title>WebRTC JavaScript Object RTC</title>
    <author initials="R." surname="Raymond" fullname="Robin Raymond">
      <organization></organization>
    </author>
    <date year="2013" month="July" day="05"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference anchor='I-D.ietf-rtcweb-jsep'>
<front>
<title>Javascript Session Establishment Protocol</title>

<author initials='J' surname='Uberti' fullname='Justin Uberti'>
    <organization />
</author>

<author initials='C' surname='Jennings' fullname='Cullen Jennings'>
    <organization />
</author>

<date month='February' day='27' year='2013' />

<abstract><t>This document describes the mechanisms for allowing a Javascript application to fully control the signaling plane of a multimedia session via the interface specified in the W3C RTCPeerConnection API, and discusses how this relates to existing signaling protocols.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-rtcweb-jsep-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-rtcweb-jsep-03.txt' />
</reference>



<reference anchor='I-D.raymond-rtcweb-webrtc-js-obj-api-rationale'>
<front>
<title>WebRTC JavaScript Object API Rationale</title>

<author initials='R' surname='Raymond' fullname='Robin Raymond'>
    <organization />
</author>

<author initials='E' surname='Lagerway' fullname='Erik Lagerway'>
    <organization />
</author>

<author initials='I' surname='Castillo' fullname='Inaki Castillo'>
    <organization />
</author>

<author initials='R' surname='Shpount' fullname='Roman Shpount'>
    <organization />
</author>

<date month='June' day='25' year='2013' />

<abstract><t>This document describes the reasons why a JavaScript Object API approach is a far better solution than using SDP [RFC4566] as a surface API for interfacing with WebRTC.  The document outlines the issues and pitfalls as well as use cases that are difficult (or impossible) with SDP with offer / answer [RFC3264], and explains the benefits and goals of an alternative JavaScript Object API approach.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-raymond-rtcweb-webrtc-js-obj-api-rationale-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-raymond-rtcweb-webrtc-js-obj-api-rationale-00.txt' />
</reference>



<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17970' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>


<reference anchor="WebRTC10" target="http://www.w3.org/TR/2012/WD-webrtc-20120821/">
  <front>
    <title>WebRTC 1.0 Real-time Communication Between Browsers</title>
    <author initials="A." surname="Bergkvist" fullname="Adam Bergkvist">
      <organization></organization>
    </author>
    <date year="2012" month="August" day="21"/>
  </front>
</reference>
<reference anchor="MediaCapture" target="http://www.w3.org/TR/2013/WD-mediacapture-streams-20130516/">
  <front>
    <title>Media Capture and Streams</title>
    <author initials="D." surname="Burnett" fullname="Daniel C. Burnett">
      <organization></organization>
    </author>
    <date year="2013" month="May" day="29"/>
  </front>
</reference>


    </references>




  </back>
</rfc>

