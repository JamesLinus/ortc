



Network Working Group                                         R. Raymond
Internet-Draft                                                 Hookflash
Intended status: Informational                                   C. Dorn
Expires: January 07, 2014                                    Independent
                                                             E. Lagerway
                                                               Hookflash
                                                         I. Baz Castillo
                                                               Versatica
                                                              R. Shpount
                                                             TurboBridge
                                                           July 06, 2013


                 WebRTC JavaScript Object RTC Examples
           draft-raymond-rtcweb-webrtc-js-obj-rtc-examples-00

Abstract

   This draft outlines example use cases with example code for using the
   WebRTC JavaScript Object RTC.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 07, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Raymond, et al.         Expires January 07, 2014                [Page 1]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Example Use Cases . . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  Simple  . . . . . . . . . . . . . . . . . . . . . . . . .   3
       3.1.1.  Example Code  . . . . . . . . . . . . . . . . . . . .   3
       3.1.2.  Same Under JSEP . . . . . . . . . . . . . . . . . . .   5
     3.2.  More Complex  . . . . . . . . . . . . . . . . . . . . . .   7
       3.2.1.  Example Code  . . . . . . . . . . . . . . . . . . . .   7
     3.3.  Adding / Removing Streams . . . . . . . . . . . . . . . .   9
       3.3.1.  Simple Example  . . . . . . . . . . . . . . . . . . .   9
       3.3.2.  Complex Example . . . . . . . . . . . . . . . . . . .  10
     3.4.  Audio with DTMF, Video and Data Sockets . . . . . . . . .  12
       3.4.1.  Use case  . . . . . . . . . . . . . . . . . . . . . .  12
       3.4.2.  Example Code  . . . . . . . . . . . . . . . . . . . .  12
   4.  WebRTC 1.0 Comparison Example Usage Cases . . . . . . . . . .  15
     4.1.  Stream Added  . . . . . . . . . . . . . . . . . . . . . .  15
       4.1.1.  WebRTC 1.0  . . . . . . . . . . . . . . . . . . . . .  15
       4.1.2.  Same Under WebRTC JS Object Model . . . . . . . . . .  15
     4.2.  Stream Removed  . . . . . . . . . . . . . . . . . . . . .  16
       4.2.1.  WebRTC 1.0  . . . . . . . . . . . . . . . . . . . . .  16
       4.2.2.  Same Under WebRTC JS Object Model . . . . . . . . . .  17
   5.  Example Descriptions and Constraints  . . . . . . . . . . . .  17
     5.1.  Connection Description  . . . . . . . . . . . . . . . . .  17
     5.2.  Stream Description  . . . . . . . . . . . . . . . . . . .  18
       5.2.1.  Full Description  . . . . . . . . . . . . . . . . . .  18
       5.2.2.  Loose Description . . . . . . . . . . . . . . . . . .  18
     5.3.  Constraints . . . . . . . . . . . . . . . . . . . . . . .  19
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  20
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  20
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  20
     7.2.  Informative References  . . . . . . . . . . . . . . . . .  20
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  21

1.  Introduction

   This draft is supplementary to the WebRTC JavaScript Object RTC draft
   [WebRTCJSObj] and outlines code examples when using the proposed
   object model.  The code is written in a sequential fashion where both
   "Alice" and "Bob" roles are merged into a single code stream even
   though they would actually be split across the network.  This is
   helpful for code illustration purposes, otherwise a sequence diagram



Raymond, et al.         Expires January 07, 2014                [Page 2]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   and event firings to incorporate custom signaling would confuse the
   example but add virtually no value in understanding the sequences
   needing to be called to setup RTC communications.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

3.  Example Use Cases

3.1.  Simple

   1.  Browser A creates a connection

   2.  Browser A indicates the desire to connect to Browser B

   3.  Browser B creates a connection

   4.  Browser B sends response to Browser A

   5.  Browser A and B exchange candidates

   6.  Browser A and B are connected

   7.  Browser A and Browser B send media

3.1.1.  Example Code

   This code illustrates both "Alice" and "Bob" forming a simple media
   stream connection (within the same code flow for documentation sake)
   where the external signaling is left up to the implementation.  This
   is very similar to the "basic" use case in the current WebRTC 1.0
   [WebRTC10].  Media streams capture and rendering details are not
   shown as they they fall with in the scope of the browser media stream
   API [MediaCapture].

   //-------------------------------------------------------------------
   // STEP 1: Browser A creates a connection
   var alice_connection = new ORTC.Connection();

   //-------------------------------------------------------------------
   // STEP 2: Browser A indicates the desire to connect to Browser B
   var msg_connection_info_for_bob = JSON.stringify(
     alice_connection.getDescription());
   var msg_constraints_for_bob = JSON.stringify(
     alice_connection.getConstraints("receive"));



Raymond, et al.         Expires January 07, 2014                [Page 3]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   alice_connection.receiveStream(aliceMediaStreamFromBob);

   mysignal(msg_connection_info_for_bob, msg_constraints_for_bob);

   //-------------------------------------------------------------------
   // STEP 3: Browser B creates a connection
   var bob_connection = new ORTC.Connection();
   bob_connection.setDescription( JSON.parse(
     msg_connection_info_for_bob),"remote");
   bob_connection.setConstraints( JSON.parse(
     msg_constraints_for_bob), "send");

   bob_connection.receiveStream(bobMediaStreamFromAlice);
   bob_connection.sendStream(bobMediaStreamForAlice);

   //-------------------------------------------------------------------
   // STEP 4: Browser B sends response to Browser A
   var msg_connection_info_for_alice = JSON.stringify(
     bob_connection.getDescription());
   var msg_constraints_for_alice = JSON.stringify(
     bob_connection.getConstraints("receive"));

   mysignal(msg_connection_info_for_alice, msg_constraints_for_alice);

   alice_connection.setDescription( JSON.parse(
     msg_connection_info_for_alice), "remote");
   alice_connection.setConstraints( JSON.parse(
     msg_constraints_for_alice), "send");

   alice_connection.sendStream(aliceMediaStreamForBob);

   //-------------------------------------------------------------------
   // STEP 5: Browser A and B exchange candidates
   // - tightly couple trickle ICE (usually sent over signaling channel)
   alice_connection.onconnectioncandidate = function(candidate) {
       bob_connection.addConnectionCandidate(
         JSON.parse(JSON.stringify(candidate)));
   });
   bob_connection.onconnectioncandidate = function(candidate) {
       alice_connection.addConnectionCandidate(
         JSON.parse(JSON.stringify(candidate)));
   });

   //-------------------------------------------------------------------
   // STEP 6: Browser A and B are connected
   alice_connection.onconnected = function() {
     // ... horray ...
   }



Raymond, et al.         Expires January 07, 2014                [Page 4]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   bob_connection.onconnected = function() {
     // ... horray ...
   }

   //-------------------------------------------------------------------
   // STEP 7: Browser A and Browser B send media

   alice_connection.onstreamconnected = function(stream) {
     // ... horray ... stream can play now...
   }
   bob_connection.onstreamconnected = function(stream) {
     // ... horray ... stream can play now...
   }


3.1.2.  Same Under JSEP

   This simple example Section 3.1.1 illistrates one simple concept, the
   local party dictates the codecs it wishes to receive.  The same
   situation expressed in WebRTC 1.0 [WebRTC10] code is too unmanageable
   to publish so pseudo code will suffice to illustrate the comparison:

   1.   Alice creates an offer

   2.   Alice hold back setting the offer in the browser

   3.   Alice parses the offer SDP to extract out the codec / algorithm
        list, and converts to "mysignal" format

   4.   Alice signals "mysignal" format on the wire to Bob

   5.   Bob converts "mysignal" into a regenerated SDP offer format

   6.   Bob creates an answer (using the regenerated SDP offer)

   7.   Bob parses the SDP answer, extracts out the codec list, and
        prepare for "mysignal" format

   8.   Bob regenerates the SDP answer, changes the m-line to match the
        codec, changes all the "a=" to match the codecs from Alice,
        changes all the special "format" SDP attributes that match the
        payload id of the codecs

   9.   Bob set the new regenerated "replacement" answer back to the
        browser as a replacement answer

   10.  Bob signals "mysignal" format on the wire back to Alice




Raymond, et al.         Expires January 07, 2014                [Page 5]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   11.  Alice generates a replacement offer based on Bob's codecs from
        "mysignal" format

   12.  Alice sets the replacement offer to the browser

   13.  Alice generates a new SDP answer based on Alice's original
        codecs

   14.  Alice gives the answer to the browser

   Why is this so much more complicated under JSEP?

   1.  Requires SDP parsing, generating and format mangling to set
       "basic" things like codecs

   2.  Requires the SDP format to be understood, including the SSRC
       bundling information, even though only the codecs are re-arranged

   3.  The state machine requires a particular state order, in which
       operations must be followed

   4.  The SDP is a negotiated codec list, not a unidirectional codec
       list

   Even ignoring the need to parse the SDP format (assuming a library is
   used to do that work), the code is still very difficult to use and
   manage.

   In "mysignal" signaling, the remote party must only send to the
   codecs / payloads dictated by the local peer.  Except, this is not
   how SDP works.  An SDP offer dictates the sending codecs the remote
   peer should expect to receive, not the codec list the local peer
   wishes to receive.  In this scenario, only when the answer arrives
   can the actual codec list for the offer be determined to "trick" SDP
   into thinking that's the way it wanted to "send" the codecs all
   along.

   This could lead to the argument "follow the SDP way of doing
   constraints".  That's part of the trouble, signaling protocols either
   have to bend over backwards to "follow the SDP way", or, just do SDP.
   The JSEP protocol is highly biased to a signal method of doing
   negotiations, that is SIP with SDP.  All alternative signaling
   protocols are forced to carry an SDP parser and generated to utilize
   WebRTC despite not needing SDP, or, they are forced to use SDP.

   This is merely one of many cases that is quite complex under JSEP.





Raymond, et al.         Expires January 07, 2014                [Page 6]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


3.2.  More Complex

   1.  Browser A creates a connection

   2.  Browser A indicates the desire to connect to Browser B, includes
       stream description

   3.  Browser B creates a connection, send browser A a stream
       description

   4.  Browser B sends response to Browser A

   5.  Browser A and B exchange candidates

   6.  Browser A and B are connected

   7.  Browser A and Browser B send media as defined in the stream
       descriptions

3.2.1.  Example Code

   This case differs slightly from the simple example (Section 3.1)
   where Alice and Bob include details of their stream information on
   the wire rather than relying loose rules auto-assembly of the stream
   information.  This ensures the streams sent over RTP are assembled
   exactly as specified by the sender for signaling situations (where
   this matters).

   //-------------------------------------------------------------------
   // STEP 1: Browser A creates a connection
   var alice_connection = new ORTC.Connection();

   //-------------------------------------------------------------------
   // STEP 2: Browser A indicates the desire to connect to Browser B
   var msg_connection_info_for_bob = JSON.stringify(
     alice_connection.getDescription());
   var msg_constraints_for_bob = JSON.stringify(
     alice_connection.getConstraints("receive"));
   var msg_stream_info_for_bob = JSON.stringify(
     alice_connection.getDescription(aliceStreamForBob));

   alice_connection.sendStream(aliceMediaStreamForBob);

   mysignal(
     msg_connection_info_for_bob,
     msg_constraints_for_bob,
     msg_stream_info_for_bob
     );



Raymond, et al.         Expires January 07, 2014                [Page 7]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   //-------------------------------------------------------------------
   // STEP 3: Browser B creates a connection
   var bob_connection = new ORTC.Connection();
   bob_connection.setDescription( JSON.parse(
     msg_connection_info_for_bob),"remote");
   bob_connection.setConstraints( JSON.parse(
     msg_constraints_for_bob), "send");

   bob_connection.receiveStream(
     bobMediaStreamFromAlice,
     JSON.parse(msg_stream_info_for_bob));
   bob_connection.sendStream(bobMediaStreamForAlice);

   //-------------------------------------------------------------------
   // STEP 4: Browser B sends response to Browser A
   var msg_connection_info_for_alice = JSON.stringify(
     bob_connection.getDescription());
   var msg_constraints_for_alice = JSON.stringify(
     bob_connection.getConstraints("receive"));
   var msg_stream_info_for_alice = JSON.stringify(
     alice_connection.getDescription(bobStreamForAlice));

   mysignal(
     msg_connection_info_for_alice,
     msg_constraints_for_alice,
     msg_stream_info_for_alice
     );

   alice_connection.setDescription( JSON.parse(
     msg_connection_info_for_alice), "remote");
   alice_connection.setConstraints( JSON.parse(
     msg_constraints_for_alice), "send");

   alice_connection.receiveStream(
     aliceMediaStreamFromBob,
     JSON.parse(msg_stream_info_for_alice));

   //-------------------------------------------------------------------
   // STEP 5: Browser A and B exchange candidates
   // - tightly couple trickle ICE (usually sent over signaling channel)
   alice_connection.onconnectioncandidate = function(candidate) {
       bob_connection.addConnectionCandidate(
         JSON.parse(JSON.stringify(candidate)));
   });
   bob_connection.onconnectioncandidate = function(candidate) {
       alice_connection.addConnectionCandidate(
         JSON.parse(JSON.stringify(candidate)));
   });



Raymond, et al.         Expires January 07, 2014                [Page 8]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   //-------------------------------------------------------------------
   // STEP 6: Browser A and B are connected
   alice_connection.onconnected = function() {
     // ... horray ...
   }

   bob_connection.onconnected = function() {
     // ... horray ...
   }

   //-------------------------------------------------------------------
   // STEP 7: Browser A and Browser B send media

   alice_connection.onstreamconnected = function(stream) {
     // ... horray ... stream can play now...
   }
   bob_connection.onstreamconnected = function(stream) {
     // ... horray ... stream can play now...
   }


3.3.  Adding / Removing Streams

3.3.1.  Simple Example

   1.  Browser A creates a connection

   2.  Browser A indicates the desire to connect to Browser B

   3.  Browser B creates a connection

   4.  Browser B sends response to Browser A

   5.  Browser A and B exchange candidates

   6.  Browser A and B are connected

   7.  Browser A and Browser B send media

   8.  Browser A sends additional media stream

   9.  Browser A removes first media stream









Raymond, et al.         Expires January 07, 2014                [Page 9]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


3.3.1.1.  Example Code

   Steps 1-7 follow the example steps from the simple example
   (Section 3.1.1).

   //-------------------------------------------------------------------
   // STEP 1 .. STEP 7: follows simple example steps

   // ... see simple example ...

   //-------------------------------------------------------------------
   // STEP 8: Browser A sends additional media stream

   alice_connection.sendStream(aliceFishTankStreamForBob);

   mysignal("to:bob", "+stream: fish tank cam");

   bob_connection.receiveStream(addedStreamFromAlice);

   //-------------------------------------------------------------------
   // STEP 9: Browser A removes first media stream

   alice_connection.sendStream(aliceMediaStreamForBob, false);

   mysignal("to:bob", "-stream: me");

   bob_connection.onstreamdisconnected = function(stream) {
     // ... can't see alice now ...
   }


3.3.2.  Complex Example

   1.   Browser A creates a connection

   2.   Browser A indicates the desire to connect to Browser B, includes
        stream description

   3.   Browser B creates a connection, send browser A a stream
        description

   4.   Browser B sends response to Browser A

   5.   Browser A and B exchange candidates

   6.   Browser A and B are connected





Raymond, et al.         Expires January 07, 2014               [Page 10]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   7.   Browser A and Browser B send media as defined in the stream
        descriptions

   8.   Browser A creates a description for a new stream, sends to
        Browser B

   9.   Browser B listens for new stream based on description

   10.  Browser B notifies Browser A ready

   11.  Browser A send new stream to Browser B

3.3.2.1.  Example Code

   Steps 1-7 follow the example steps from the more complex example
   (Section 3.2).

   //-------------------------------------------------------------------
   // STEP 1 .. STEP 7: follows more complex example steps

   // ... see more complex example ...

   //-------------------------------------------------------------------
   // STEP 8: Browser A creates a description for a new stream,
   //         sends to Browser B

   fishDes = alice_connection.getDescription(aliceFishTankStreamForBob);

   mysignal("to:bob","stream:info", JSON.stringify(fishDes));

   //-------------------------------------------------------------------
   // STEP 9: Browser B listens for new stream based on description

   bob_connection.receiveStream(
     addedStreamFromAlice,
     JSON.parse(fishDes));

   //-------------------------------------------------------------------
   // STEP 10: Browser B notifies Browser A ready

   mysignal("to:alice","stream:listening");

   //-------------------------------------------------------------------
   // STEP 11: Browser B notifies Browser A ready

   alice_connection.sendStream(aliceFishTankStreamForBob);





Raymond, et al.         Expires January 07, 2014               [Page 11]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


3.4.  Audio with DTMF, Video and Data Sockets

3.4.1.  Use case

   In this scenario, browser A wishes to use three separate sockets on
   three different ports.  One for audio, one for video and one for
   data.  The socket should not be muxed in this case for the various
   kind of media and streams.  The code only differs from the simple
   example (Section 3.1.1) by the following:

   1.  Alice and Bob create sockets with specific roles

   2.  Alice sends a data stream

   3.  Alice creates a DTMF media stream track and adds to audio / video
       stream

   4.  Bob listens for the DTMF media stream track to connect

   5.  Bob distinguishes the type of stream connected, i.e. media vs
       data (for unspecified purpose)

   The code reflects only those changes needed to accomplish the task.
   In other words, the modularity allows object model code not to have
   to do bend to a state machine and the coder is free to treat the
   additions as independent tasks rather than having to be concerned
   with the impact it will have on the other components.

3.4.2.  Example Code

   //-------------------------------------------------------------------
   // STEP 1: Browser A creates sockets and a connection

   var alice_aTrans = new ORTC.MediaSocket(
     "audio",
     {kinds:["audio", "dtmf"]});
   var alice_vTrans = new ORTC.MediaSocket(
     "video",
     {kinds:["video"]});
   var alice_dTrans = new ORTC.DataSocket();
   var alice_connection = new ORTC.Connection(
     {sockets:[alice_aTrans, alice_vTrans, alice_dTrans]});

   //-------------------------------------------------------------------
   // STEP 2: Browser A indicates the desire to connect to Browser B
   var msg_connection_info_for_bob = JSON.stringify(
     alice_connection.getDescription());
   var msg_constraints_for_bob = JSON.stringify(



Raymond, et al.         Expires January 07, 2014               [Page 12]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


     alice_connection.getConstraints("receive"));

   alice_connection.receiveStream(aliceMediaStreamFromBob);
   alice_connection.sendStream(aliceDataStream);

   mysignal(msg_connection_info_for_bob, msg_constraints_for_bob);

   //-------------------------------------------------------------------
   // STEP 3: Browser B creates a connection
   var bob_aTrans = new ORTC.MediaSocket(
     "audio",
     {kinds:["audio", "dtmf"]});
   var bob_vTrans = new ORTC.MediaSocket(
     "video",
     {kinds:["video"]});
   var bob_dTrans = new ORTC.DataSocket();
   var bob_connection = new ORTC.Connection(
     {sockets:[bob_aTrans, bob_vTrans, bob_dTrans]});

   bob_connection.setDescription( JSON.parse(
     msg_connection_info_for_bob),"remote");
   bob_connection.setConstraints( JSON.parse(
     msg_constraints_for_bob), "send");

   bob_connection.receiveStream(bobMediaStreamFromAlice);
   bob_connection.sendStream(bobMediaStreamForAlice);

   //-------------------------------------------------------------------
   // STEP 4: Browser B sends response to Browser A
   var msg_connection_info_for_alice = JSON.stringify(
     bob_connection.getDescription());
   var msg_constraints_for_alice = JSON.stringify(
     bob_connection.getConstraints("receive"));

   mysignal(msg_connection_info_for_alice, msg_constraints_for_alice);

   alice_connection.setDescription( JSON.parse(
     msg_connection_info_for_alice), "remote");
   alice_connection.setConstraints( JSON.parse(
     msg_constraints_for_alice), "send");

   var aliceDtmfTrackToBob =
       new ORTC.DtmfMediaStreamTrack(alice_aTrans);
   var aliceMediaStreamForBob =
       new ORTC.MediaStream([aliceDtmfTrackToBob]);

   alice_connection.sendStream(aliceMediaStreamForBob);




Raymond, et al.         Expires January 07, 2014               [Page 13]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   //-------------------------------------------------------------------
   // STEP 5: Browser A and B exchange candidates
   // - tightly couple trickle ICE (usually sent over signaling channel)
   alice_connection.onconnectionandidate = function(candidate) {
       bob_connection.addConnectionCandidate(
         JSON.parse(JSON.stringify(candidate)));
   });
   bob_connection.onconnectioncandidate = function(candidate) {
       alice_connection.addConnectionCandidate(
         JSON.parse(JSON.stringify(candidate)));
   });

   //-------------------------------------------------------------------
   // STEP 6: Browser A and B are connected
   alice_connection.onconnected = function() {
     // ... horray ...
   }

   bob_connection.onconnected = function() {
     // ... horray ...
   }

   //-------------------------------------------------------------------
   // STEP 7: Browser A and Browser B send media

   alice_connection.onstreamconnected = function(stream) {
     // ... horray ... stream can play now...
     aliceDtmfTrackToBob.playTones("4,1,5,111222344#");
   }

   bob_connection.onstreamconnected = function(stream) {
     if (stream instanceof ORTC.DataStream) {
        // horray have data stream
     } else {
        // ... horray ... stream can play now...
      }
   }

   bob_connection.ontrackconnected = function(track) {
     if (track instanceof ORTC.DtmfMediaStreamTrack) {
       track.ontonestop = function(digit) {
         // ... react just like an IVR system! ...
       }
     }
   }






Raymond, et al.         Expires January 07, 2014               [Page 14]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


4.  WebRTC 1.0 Comparison Example Usage Cases

4.1.  Stream Added

   Scenario:

   1.  Alice adds a new stream on an established session with Bob.

4.1.1.  WebRTC 1.0

   //-------------------------------------------------------------------
   // Alice adds a new stream to the RTCPeerconnection and sends
   // the SDP Offer to Bob
   alice_RTCPeerConnection.addStream(stream);
   alice_RTCPeerConnection.createOffer(
     localDescriptionCreated, rtcError);

   var localDescriptionCreated = function(description) {
     alice_RTCPeerConnection.setLocalDescription(
       description, sendDescription, rtcError);
   }

   var sendDescription = function() {
     mySignal({sdp: alice_RTCPeerConnection.localDescription});
   }

   // Bob receives the SDP Offer from Alice, consumes it and
   // sends her the SDP Answer
   bob_RTCPeerConnection.setRemoteDescription(
     new RTCSessionDescription({type: 'offer', sdp: sdpOfferFromAlice}),
     sendDescription,
     rtcError
   );

   var sendDescription = function() {
     mySignal({sdp: bob_RTCPeerConnection.localDescription});
   }

   // Alice receives the Answer from Bob and processes it
   alice_RTCPeerConnection.setRemoteDescription(
     new RTCSessionDescription({type: 'answer', sdp: sdpAnswerFromBob}),
     function(){},
     rtcError);


4.1.2.  Same Under WebRTC JS Object Model





Raymond, et al.         Expires January 07, 2014               [Page 15]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   //-------------------------------------------------------------------
   // Alice sends the description of a new stream to Bob and prepares
   // the stream to be send after ICE discovery.
   var aliceStreamForBobDesc = alice_connection.getDescription(stream);
   alice_connection.sendStream(stream);

   mySignal({stream: aliceStreamForBobDesc});

   // Bob receives the new stream description and processes it
   bob_connection.receiveStream(aliceStreamForBobDesc);


4.2.  Stream Removed

   Scenario:

   1.  Alice removes a stream on an established session with Bob.

4.2.1.  WebRTC 1.0

   //-------------------------------------------------------------------
   // Alice removes a stream from the RTCPeerconnection and sends
   // the SDP Offer to Bob
   alice_RTCPeerConnection.removeStream(stream);
   alice_RTCPeerConnection.createOffer(
     localDescriptionCreated, rtcError);

   var localDescriptionCreated = function(description) {
     alice_RTCPeerConnection.setLocalDescription(
       description, sendDescription, rtcError);
   }

   var sendDescription = function(){
     mySignal({sdp: alice_RTCPeerConnection.localDescription});
   }

   // Bob receives the SDP Offer from Alice and processes it
   bob_RTCPeerConnection.setRemoteDescription(
     new RTCSessionDescription({type: 'offer', sdp: sdpOfferFromAlice}),
     sendDescription,
     rtcError
   );

   // setRemoteDescription() execution will inform Bob
   // about the stream removal
   bob_RTCPeerConnection.onremovestream = function(stream) {
     // stream removed
   }



Raymond, et al.         Expires January 07, 2014               [Page 16]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   //  Bob sends the SDP Answer to Alice
   var sendDescription = function(){
     mySignal(sdp: bob_RTCPeerConnection.localDescription);
   }

   // Alice receives the Answer from Bob and processes it
   alice_RTCPeerConnection.setRemoteDescription(
     new RTCSessionDescription({type: 'answer', sdp: sdpAnswerFromBob}),
     function(){},
     rtcError);


4.2.2.  Same Under WebRTC JS Object Model

   //-------------------------------------------------------------------
   // Alice removes the stream from the RTC connection
   alice_connection.sendStream(stream, false);

   // Bob is informed about the stream disconnection
   bob_connection.onstreamdisconnected = function(stream) {
     // stream removed
   }


5.  Example Descriptions and Constraints

   This section outlines some examples of what object descriptions or
   constraints might look like expressed as natural JavaScript
   structures.  The exact properties needs to be defined as each option
   becomes standardized.  As such, use these examples for illustrative
   purposes only.

5.1.  Connection Description

   //-------------------------------------------------------------------
   var myConnectionDescription = {
       cname: "<value>",
       contextId: "<random-id>",
       secret: "<random>",
       fingerprints: ["<hash1>","<hash2>"]
   };










Raymond, et al.         Expires January 07, 2014               [Page 17]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


5.2.  Stream Description

5.2.1.  Full Description

   //-------------------------------------------------------------------
   var myStreamDescription = [
       { // audio
           track: "<track-id>",
           ssrc: 5,
           redundencySsrc: 10,
           socketId: "my-audio-port",
           constraints: { /* optional constraints */ }
       },
       { // video
           kind: "video",
           ssrc: 10,
           socketId: "my-video-port",
           constraints: { /* optional constraints */ }
        },
        { // dtmf
           kind: "dtmf",
           ssrc: 5,
           socketId: "my-audio-port",
           constraints: { /* optional constraints */ }
        },
        { // unspecified
            track: "poor-taste-track-id",
            omit: true
        }
   ];


5.2.2.  Loose Description

   //-------------------------------------------------------------------
   // In this example, can auto map audio / video based on kind alone
   var myStreamDescriptionLooseExampleA = [
       {
           kind: "audio"
       },
       {
           kind: "video"
       }
   ];

   //-------------------------------------------------------------------
   // In this example a more specific definition is given,
   // but some things are still auto-mapped



Raymond, et al.         Expires January 07, 2014               [Page 18]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   var myStreamDescriptionLooseExampleB = [
       {
           kind: "audio",
           ssrc: 5,
           socketId: "my-audio-port"
       },
       {
           kind: "video",
           socketId: "my-video-port",
       },
       {
           kind: "dtmf"
       },
       {
           track: "<existing-track-id>",
           ssrc: 17,
           socketId: "my-other-port"
       }
   ];


5.3.  Constraints

   //-------------------------------------------------------------------
   var myConstraints = {
       codecs: [
           {
               payloadId: 96,
               kind: "audio",
               name: "<name>",
               hzRate: 32000,
               channels: 1
               // ...
           },
           {
               payloadId: 96,
               kind: "video",
               name: "<name>",
               hzRate: 96000
               // ...
           }
       ],
       crypto: [
           {
               algorithm: "<name>",
               priority: 0,
               // mki: "<octects>",
               key: "<random>"



Raymond, et al.         Expires January 07, 2014               [Page 19]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


           },
           {
               algorithm: "<name>",
               priority: 2,
               // mki: "<octets>",
               key: "<random>"
           }
       ],
       required: {
       },
       optional: {
           video: {
               maxWdith: 1280,
               maxHeight: 720
           }
       }
   };


6.  Security Considerations

   As this is merely an informative example draft, the security
   considerations are identical to the related draft proposal found in
   the WebRTC JavaScript Object RTC draft [WebRTCJSObj].

7.  References

7.1.  Normative References

   [WebRTCJSObj]
              Raymond, R., "WebRTC JavaScript Object RTC", July 2013,
              <http://tools.ietf.org/html/draft-raymond-rtcweb-webrtc-
              js-obj-rtc-00>.

7.2.  Informative References

   [I-D.ietf-rtcweb-jsep]
              Uberti, J. and C. Jennings, "Javascript Session
              Establishment Protocol", draft-ietf-rtcweb-jsep-03 (work
              in progress), February 2013.

   [I-D.raymond-rtcweb-webrtc-js-obj-api-rationale]
              Raymond, R., Lagerway, E., Castillo, I., and R. Shpount,
              "WebRTC JavaScript Object API Rationale", draft-raymond-
              rtcweb-webrtc-js-obj-api-rationale-00 (work in progress),
              June 2013.

   [MediaCapture]



Raymond, et al.         Expires January 07, 2014               [Page 20]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


              Burnett, D., "Media Capture and Streams", May 2013, <http:
              //www.w3.org/TR/2013/WD-mediacapture-streams-20130516/>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [WebRTC10]
              Bergkvist, A., "WebRTC 1.0 Real-time Communication Between
              Browsers", August 2012,
              <http://www.w3.org/TR/2012/WD-webrtc-20120821/>.

Authors' Addresses

   Robin Raymond
   Hookflash
   436, 3553 31 St. NW
   Calgary, Alberta  T2L 2K7

   Email: robin@hookflash.com


   Christoph Dorn
   Independent
   1999 Highway 97 South
   West Kelowna, BC  V1Z 1B2
   Canada

   Email: christoph@christophdorn.com


   Erik Lagerway
   Hookflash
   436, 3553 31 St. NW
   Calgary, Alberta  T2L 2K7
   Canada

   Email: erik@hookflash.com


   Inaki Baz Castillo
   Versatica
   Barakaldo
   Basque Country
   Spain

   Email: ibc@aliax.net





Raymond, et al.         Expires January 07, 2014               [Page 21]

Internet-Draft    WebRTC JavaScript Object RTC Examples        July 2013


   Roman Shpount
   TurboBridge
   4905 Del Ray Ave Suite 300
   Bethesda, MD  20814
   USA

   Email: rshpount@turbobridge.com












































Raymond, et al.         Expires January 07, 2014               [Page 22]
